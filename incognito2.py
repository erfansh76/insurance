# -*- coding: utf-8 -*-
"""Incognito2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DJc8TCK6Uu9_67MhZFTZDmqj4zAERODI

importing libraries
"""

import pandas as pd
import itertools

"""Reading Data"""

data = pd.read_csv('/content/insurance.csv')

"""Data"""

data.head()

data.dtypes

"""Defining Q"""

quasi_identifiers = ['age', 'sex', 'bmi', 'charges']

"""Frequency Set

"""

# frequencySet = lambda table, columns: table.groupby(columns).size()

def k_Anonymous(table, q, k):
  for freq in table.groupby(q).size():
    if freq < k:
      return False
  return True

"""Check if the table is k anonymized"""

k_Anonymous(data, quasi_identifiers, 1)

"""Defining Generalization Hirarchy

SEX -> p

age :

10 <= age < 30

30 <= age < 50

50 <= age < 70

70 <= age < inf


bmi :

xx.xxx -> xx.xx*

xx.xx* -> xx.x**

xx.x** -> xx.***


Charges:

xxxx.xxxxx -> xxxx.xxx**

xxxx.xxx** -> xxxx.x****

xxxx.x**** -> xxx*.*****


"""

generalizations = {'sex' : 1, 'age': 1, 'bmi' : 3, 'charges' : 3}

"""Defining generalization functions"""

# sex
def sex_zero_gen(column):
  return column

def sex_first_gen(column):
  return 'p'

# age
def age_zero_gen(column):
  return column

def age_first_gen(column):
  if column < 10:
    return '-10'
  elif column >= 10 and column < 30:
    return '10-30'
  elif column >= 30 and column < 50:
    return '30-50'
  elif column >= 50 and column < 70:
    return '50-70'
  else:
    return '70+'

# bmi
def bmi_zero_gen(column):
  return column

def bmi_first_gen(column):

  return str(column)[:-1] + '*'

def bmi_second_gen(column):
  return str(column)[:-2] + '**'

def bmi_third_gen(column):
  return '*'

# Charges
def charges_zero_gen(column):
  return column

def charges_first_gen(column):
  return str(column)[:-2] + '**'

def charges_second_gen(column):
  return str(column)[:-4] + '****'

def charges_third_gen(column):
  return '*'

"""Generalization"""

def get_generalization_function(column, level = 0):
  if column == 'age':
    if level == 0:
      return age_zero_gen
    elif level == 1:
      return age_first_gen

  elif column == 'sex':
    if level == 0:
      return sex_zero_gen
    elif level == 1:
      return sex_first_gen
  elif column == 'bmi':
    if level == 0:
      return bmi_zero_gen
    elif level == 1:
      return bmi_first_gen
    elif level == 2:
      return bmi_second_gen
    elif level == 3:
      return bmi_third_gen
  elif column == 'charges':
    if level == 0:
      return charges_zero_gen
    elif level == 1:
      return charges_first_gen
    elif level == 2:
      return charges_second_gen
    elif level == 3:
      return charges_third_gen

"""Hirarchy"""

def generate_combinations(dictionary):
    keys = list(dictionary.keys())

    def helper(index, current_combination):
        if index == len(keys):
            return [current_combination]

        key = keys[index]
        value = dictionary[key]
        combinations = []

        for i in range(value + 1):
            new_combination = current_combination.copy()
            new_combination[key] = i
            combinations.extend(helper(index + 1, new_combination))

        return combinations

    return helper(0, {})

generalizations

len(generate_combinations(generalizations))

generate_combinations(generalizations)

"""Remove direct generalizations"""

def is_direct_generalization(ref, gen):
  one_diff = False
  for key in ref:
    if ref[key] - gen[key] not in [0,-1]:
      return False
    elif ref[key] - gen[key] in [-1]:
      if one_diff:
        return False
      else:
        one_diff = True
  return True


def remove_direct_generalizations(ref, generalizations):
  filtered = []
  removed = []

  for comb in generalizations:
    if is_direct_generalization(ref, comb):
      removed.append(comb)
    else:
      filtered.append(comb)

  return filtered, removed

is_direct_generalization({'sex': 0, 'age': 0, 'bmi': 0, 'charges': 0}, {'sex': 0, 'age': 0, 'bmi': 0, 'charges': 2})

hirarchy = generate_combinations(generalizations)
filterd, removed = remove_direct_generalizations({'sex': 0, 'age': 0, 'bmi': 0, 'charges': 0}, hirarchy)
print(removed)
print("---------------------")
print(filterd)

"""Generalize Table"""

def generalize(node, data):
  result = data.copy()
  for column in node:
    function = get_generalization_function(column, node[column])
    result[column] = result[column].apply(function)

  return result

df = generalize({'sex': 1, 'age': 1, 'bmi': 1, 'charges': 1}, data)

df

"""Incognito

"""

def incognito(quasi_identifiers,generalizations, data, k):
  hirarchy = generate_combinations(generalizations)
  c = hirarchy.copy()
  s = []
  while len(c) != 0:
    node = c.pop()
    df = generalize(node, data)
    if k_Anonymous(df, quasi_identifiers, k):
      s.append(node)
      c, filterd = remove_direct_generalizations(node, c)
      print(filterd)
      s = s + filterd


  return s, c

s, c = incognito(quasi_identifiers, generalizations, data, 3)

s

c